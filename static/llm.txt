Below is all the contents of our docs: 



 This is the content for the doc Create user-facing docs from your codebase.md 

 

  # How to Use and Customize the "Populate External Docs" Command in the VS Code Extension

## Step 1: Access the Command

1. Open your VS Code workspace
2. Press `Cmd+Shift+P` (Mac) or `Ctrl+Shift+P` (Windows/Linux) to open the command palette
3. Type "Populate External Docs" and select the command


## Step 2: Customizing Generation with dev-docs.json

To customize the documentation generation, modify the `dev-docs.json` file in your project root:

1. Create or open `dev-docs.json`
2. Add an `ai` object with customization options

Example `dev-docs.json`:

```json
{
  "ai": {
    "internalTypeFilters": ["class", "method", "function"],
    "codeFilters": [],
    "nameFilters": [],
    "docSubFolder": "api/",
    "merge": true,
    "externalDocPrompt": "Generate comprehensive API documentation"
  }
}
```

Key customization options:

- `internalTypeFilters`: Specify which code elements to document
- `docSubFolder`: Set the output folder for generated docs
- `merge`: Combine multiple elements into a single document
- `externalDocPrompt`: Customize the AI prompt for doc generation

The `generateBySymbols` function in `src/AiServices.ts` uses these settings to generate documentation.

## Step 3: Review and Edit

After running the command:

1. Check the `docs` folder (or your specified `docSubFolder`) for generated files
2. Review and edit the generated content as needed
3. Commit changes to your repository

By following these steps and customizing the `dev-docs.json`, you can efficiently generate and manage external documentation for your project using the VS Code extension.

  

 This is the content for the doc Enable generating codebase docs for the GitHub App.md 

 

  # Configuring dev-docs.json for GitHub App Documentation Generation

This guide will walk you through the process of configuring the `dev-docs.json` file to enable automatic documentation generation using the Dev-Docs GitHub App.

## Step 1: Locate the dev-docs.json file

The `dev-docs.json` file should be located in the root directory of your repository.

## Step 2: Basic Structure

Ensure your `dev-docs.json` file has the following basic structure:

```json
{
  "gitHubApp": {
    "workflows": []
  }
}
```

## Step 3: Configure Workflows

To enable documentation generation, add the `generateDocs` workflow to the `workflows` array:

```json
{
  "gitHubApp": {
    "workflows": ["generateDocs"]
  }
}
```

Note: The `workflows` array accepts specific enum values. Currently, the supported values are:

- `generateDocs`: Enables automatic documentation generation
- `generateChangelog`: Enables automatic changelog generation

## Step 4: Additional Configuration (Optional)

Depending on your project's needs, you may want to add more configuration options. For example:

```json
{
  "ai":{
    "contextDirs": ["src", "lib"],
  },
  "gitHubApp": {
    "workflows": ["generateDocs"]
  }
}
```

## Step 5: Commit and Push

After configuring your `dev-docs.json` and installing the GitHub app, commit the changes and push them to your repository.



  

 This is the content for the doc Generate High Level Context for a folder.md 

 

  # Using the "Generate High Level Context for the Folder" Command

## Overview

The "Generate High Level Context for the Folder" command is a powerful feature in Dev-Docs that allows you to automatically generate high-level documentation for an entire folder in your project. This guide will walk you through how to use this command and customize its behavior using the `dev-docs.json` configuration file.

## Step-by-Step Guide

### 1. Right-Click on a Folder
In your VS Code file explorer, right-click on the folder you want to document.

### 2. Select the Command
From the context menu, choose "Generate High Level Context for the Folder".

### 3. Wait for Processing
The extension will analyze the folder contents and generate documentation. This may take a moment depending on the folder size and complexity.

### 4. Review Generated Documentation
Once complete, a new Markdown file will be created in your `dev-docs` folder, containing the high-level context for the selected folder.

## Customizing with dev-docs.json

You can customize the behavior of this command by modifying the `dev-docs.json` file in your project root. Here are some key configurations:

### 1. Customizing the Context Prompt

```json
{
  "ai": {
    "contextPrompt": "your_custom_prompt_here"
  }
}
```

This allows you to specify a custom prompt for generating the context. You can also use a Markdown file for more complex prompts:

```json
{
  "ai": {
    "contextPrompt": "dev-docs/prompt.md"
  }
}
```

### 2. Specifying Context Directories

```json
{
  "ai": {
    "contextDirs": ["src", "lib", "utils"]
  }
}
```

This limits the context generation to specific directories, which is useful for large projects.




  

 This is the content for the doc Generate an Openapi file from your server code.md 

 

  # How generate an OpenAPI file from your server code

This guide will walk you through using generating an OpenAPI file from your server code using a keyboard shortcut.

## Step 1: Locate the Relevant Code

Find a codefile that owns your server logic, for example a `server.js`.

## Step 2: Using the Command

1. Open your server file containing API routes.
2. Press Shift+Cmd+A (Mac) or Shift+Ctrl+A (Windows/Linux).
3. The extension will automatically:
   - Parse your code for API routes
   - Generate a Postman collection
   - Convert it to an OpenAPI specification



  

 This is the content for the doc Generate codebase docs.md 

 

  # How to Use the "Generate Documentation" Command in Dev-Docs VS Code Extension

## Using the Command

### From the Context Menu

1. Right-click in your code file.
2. Select "Generate Documentation" from the context menu.

### Using the Shortcut

- On Mac: Press `Shift + Command + D`
- On Windows/Linux: Press `Shift + Ctrl + D`

## Customizing AI Generation

To customize the AI generation of the "Generate Documentation" command, you can modify the `dev-docs.json` file in your project root.

1. Open `dev-docs.json` in your project root.
2. Locate the `ai` section in the JSON.
3. Customize the following properties:

```json
{
  "ai": {
    "internalTypeFilters": ["class", "method", "function"],
    "codeFilters": ["async function", "export default"],
    "nameFilters": ["handleSubmit", "render"],
    "contextPrompt": "your custom prompt or path to prompt template",
    "defaultLength": "3-5 Sentences"
  }
}
```

### Key Properties:

- `internalTypeFilters`: Array of symbol types to include in documentation.
- `codeFilters`: Array of code patterns to filter for documentation.
- `nameFilters`: Array of function or method names to specifically target.
- `contextPrompt`: Custom prompt for AI generation or path to a prompt template file.
- `defaultLength`: Desired length of generated documentation.

By adjusting these properties, you can fine-tune the AI-generated documentation to better suit your project's needs.

  

 This is the content for the doc README.md 

 # Welcome to your Dev-Docs Repo

This Repo is the Starter Template and it was made by AVB

```
npm run start -- --host 0.0.0.0
```




 This is the content for the doc blog/Static Generated Sites are You Need.md 

 ---
title: Why a Static Generated Site is the Best Choice for Developer Docs and Landing Pages
authors: andrew
header_image: /img/dev-docs-assets/ClippedHeroBg.png
text_color: white
tags: [markdown, docusaurus, developerdocs]
---

# Why a Static Generated Site is the Best Choice for Developer Docs and Landing Pages

In the fast-paced world of software development, efficient documentation is crucial. Static generated sites, particularly those using Markdown and platforms like GitHub and Docusaurus, offer an optimal solution for developer docs and landing pages. Here's why:

## 1. Simplicity and Speed with Markdown

Static site generators like Docusaurus leverage Markdown, allowing developers to create lightning-fast documentation. Pages load instantly, enhancing user experience and reducing bounce rates.

## 2. Cost-Effective Hosting on GitHub or Vercel

Hosting developer docs on platforms like GitHub Pages is incredibly cost-effective, often free. This is perfect for open-source projects and startups looking to minimize expenses.

## 3. Enhanced Security for Developer Docs

Static sites, including those built with Docusaurus, are inherently more secure. With no dynamic content or databases, there are fewer vulnerabilities for potential attackers to exploit.

## 4. Version Control with GitHub

Integrating your developer docs with GitHub allows for seamless version control. This makes collaboration easier and provides a comprehensive history of documentation changes.

## 5. Focus on Content with Markdown

Markdown, the preferred format for many static site generators, allows developers to focus on writing clear, concise documentation without worrying about complex formatting.

## 6. SEO-Friendly Developer Docs

Static sites built with tools like Docusaurus are easily crawlable by search engines. Their fast load times and structured content contribute to better SEO rankings for your developer docs.

## 7. Easy Maintenance with Docusaurus

Once set up, maintaining developer docs on a static site is straightforward. Docusaurus makes it easy to update content without dealing with complex CMS systems.

## 8. Scalability for Growing Projects

Static sites can handle high traffic volumes, making them ideal for popular open-source projects hosted on GitHub with extensive developer docs.

## 9. Modern Development Workflow

Static site generators like Docusaurus integrate well with modern development tools and practices, facilitating continuous integration and deployment of your developer docs.

## 10. Flexibility with Markdown and JavaScript

Despite being "static," these sites can incorporate dynamic elements through JavaScript and APIs, giving your developer docs the best of both worlds.

In conclusion, for developer docs and landing pages, a static generated site using Markdown and tools like Docusaurus provides an excellent balance of simplicity, performance, and functionality. It's a powerful approach that can help your project's documentation stand out on platforms like GitHub.

  


 This is the content for the doc blog/Supercharge Your API and SDK Documentation.md 

 ---
title: Supercharge Your API and SDK Documentation with AI-Powered Dev-Docs
authors: andrew
tags: [docs, sdks, vscode, seo, sales]
---

Are you a developer building APIs, SDKs, or other developer tools? Maintaining comprehensive and up-to-date documentation can be a daunting task, especially as your codebase grows in complexity. Enter Dev-Docs, an AI-powered documentation solution that streamlines the process of generating and managing documentation for your projects.

## The Challenges of API and SDK Documentation

Developing APIs, SDKs, and other developer tools require meticulous attention to detail and a deep understanding of the underlying code. However, keeping the documentation in sync with the codebase can be a time-consuming and error-prone process. Manual documentation efforts often lead to inconsistencies, outdated information, and a lack of cohesion across different components.

## The Dev-Docs Solution

Dev-Docs is a cutting-edge solution that leverages the power of artificial intelligence to automate the documentation process. By analyzing your codebase and leveraging natural language processing, Dev-Docs can generate comprehensive and accurate documentation for your APIs, SDKs, and other developer tools.

### Seamless Integration with Your Workflow

One of the key advantages of Dev-Docs is its seamless integration with your existing development workflow. With the Dev-Docs VS Code extension, you can generate and manage documentation directly within your code editor, ensuring that your documentation stays in sync with your codebase.

### AI-Powered Documentation Generation

Dev-Docs utilizes advanced AI algorithms to analyze your code and generate human-readable documentation. Whether it's API endpoints, function definitions, or class structures, Dev-Docs can provide detailed explanations, examples, and usage instructions, making it easier for developers to understand and work with your tools.

### Customizable and Extensible

Dev-Docs is highly customizable, allowing you to tailor the documentation generation process to your specific needs. You can define filters, templates, and prompts to ensure that the generated documentation aligns with your project's conventions and standards.

### Version Control and Collaboration

With Dev-Docs, your documentation is treated as code, enabling version control and seamless collaboration among team members. You can track changes, review diffs, and merge updates, ensuring that your documentation remains up-to-date and consistent across different branches and releases.

## Get Started with Dev-Docs Today

Elevate your API, SDK, and developer tool documentation game with Dev-Docs. By leveraging the power of AI, you can save time, reduce errors, and provide a better developer experience for your users. Visit our website at [dev-docs.io](https://dev-docs.io) to learn more and get started with Dev-Docs today.
  
  


 This is the content for the doc blog/Use Dev-Docs with Continue.md 

 ---
title: Contextual Documentation with Dev-Docs and Continue
authors: andrew
header_image: /img/dev-docs-assets/ClippedHeroBg.png
text_color: white
tags: [docs, seo, sales, ai, code-assistant]
---

# **Contextual documentation with Dev-Docs and Continue**

[Continue](https://www.continue.dev/) is the leading open-source AI code assistant. Its IDE extensions allow you to leverage AI in your code editor to ask questions about your codebase and generate code. What's even more awesome is that it is extensible—for example, you can use any models you want with it!

<br></br>

[Dev-Docs](https://www.docs.dev/) is an AI developer tool that provides a VS Code extension for generating custom markdown documentation on your codebase that can be used by tools like Continue. Today, we are going to show how you can use Dev-Docs to generate custom, contextual documentation for a codebase, which can be used as context in Continue.

# Before you get started

Install [Dev-Docs](https://marketplace.visualstudio.com/items?itemName=dev-docs.dev-docs) in VS Code

<br></br>

![step_3.png](/img/use_dev-docs_with_continue/step_3.png)

<br></br>

Install [Continue](https://marketplace.visualstudio.com/items?itemName=Continue.continue) in VS Code

<br></br>

![step_6.png](/img/use_dev-docs_with_continue/step_6.png)

<br></br>

# **Step 1: Open the Dev-Docs extension and sign in**

Select the "Dev-Docs" extension icon from the Activity Bar on the left and then "Sign In"

<br></br>

![image.png](/img/use_dev-docs_with_continue/step_8.png)

<br></br>

Once you are signed in, you will need to create an org name for your team.  For example, our org name here is "continuedev"

<br></br>

![step_11.png](/img/use_dev-docs_with_continue/step_11.png)

<br></br>

# **Step 2: Set up your repository and generate context**

Click the "Setup my repo" button and then the "Generate Context" button

<br></br>

![step_7.png](/img/use_dev-docs_with_continue/step_7.png)

<br></br>

This will create a `dev-docs.json` file and `dev-docs` folder in your repo

<br></br>

![step_14.png](/img/use_dev-docs_with_continue/step_14.png)

<br></br>

Select the "Generate Context" button

<br></br>

![step_15.png](/img/use_dev-docs_with_continue/step_15.png)

<br></br>

# **Step 3: Select files and generate contextual documentation**

<br></br>

Choose the files you want to be used as input for the contextual documentation, making sure "Codebase" is selected, and then click "Generate New Doc"

<br></br>

![step_16.png](/img/use_dev-docs_with_continue/step_16.png)

<br></br>

When you navigate back to the file explorer you should see some files populated in dev-docs folder

<br></br>

![step_31.png](/img/use_dev-docs_with_continue/step_31.png)

<br></br>

# **Step 4: Open the Continue extension and sign in**

<br></br>

Click the Continue extension icon in the Activity Bar and sign in with your GitHub account to use the Continue free trial models (or add your own API keys if you'd like instead)

<br></br>

![step_22.png](/img/use_dev-docs_with_continue/step_22.png)

<br></br>

# Step 5: Use @dev-docs as context and ask questions

<br></br>

Continue will automatically allow you to use dev-docs folder as context (using the [folder context provider](https://docs.continue.dev/chat/context-selection#specific-folder))

<br></br>

![step_24.png](/img/use_dev-docs_with_continue/step_24.png)

<br></br>

Try asking questions like "@dev-docs what technologies are used?"

<br></br>

![step_28.png](/img/use_dev-docs_with_continue/step_40.png)

<br></br>

# Conclusion


<br></br>

Now that you have set up both Dev-Docs and Continue, you can take full advantage of the contextual documentation generated by Dev-Docs within Continue.  Everything from code explaination, high level context, best practices, and architecture are now super charged with Continue and Dev-Docs.  Thanks for reading!

  

 This is the content for the doc blog/docs-seo-sales.md 

 ---
title: Why Developer Documentation is Important for SEO and Sales
authors: andrew
header_image: /img/dev-docs-assets/ClippedHeroBg.png
text_color: white
tags: [docs, seo, sales]
---

Developer documentation plays a crucial role in enhancing both SEO and sales for software products and services. In today's digital landscape, where potential customers heavily rely on online resources for research and decision-making, well-crafted documentation can significantly impact a company's visibility, credibility, and success.

## Importance for SEO

1. **Search Engine Visibility**: High-quality documentation that addresses common questions, challenges, and use cases can improve a website's search engine ranking for relevant keywords. By providing valuable content to users, search engines recognize the website as a trustworthy and authoritative source, leading to better visibility and organic traffic.<br></br>

2. **Topical Relevance and Keyword Optimization**: Comprehensive documentation allows for the strategic inclusion of relevant keywords and phrases related to the product or service. This helps search engines better understand the topical relevance of the website, increasing its chances of appearing in relevant search results.<br></br>

3. **Content Freshness and Updates**: Regular updates and additions to the documentation create new, fresh content that search engines value. This signals that the website is actively maintained and provides up-to-date information, contributing to better search engine rankings.

## Importance for Sales

1. **Product Understanding and Adoption**: Well-documented products make it easier for potential customers to understand the features, capabilities, and use cases of the software. This increased understanding facilitates product adoption, reducing friction in the sales process.

2. **Self-Service Support**: Detailed documentation empowers users to find answers to their questions independently, reducing the need for direct sales or support interactions. This self-service approach streamlines the customer journey and frees up sales resources to focus on higher-value tasks.

3. **Credibility and Trust Building**: High-quality documentation demonstrates a commitment to transparency and customer support. This builds trust and credibility with potential customers, increasing the likelihood of closing sales and retaining existing customers.

4. **Lowering Sales Barriers**: Clear and comprehensive documentation can address common objections, concerns, or misconceptions that potential customers may have about the product or service. By proactively addressing these issues, sales teams can more effectively overcome objections and close deals.

5. **Onboarding and Training**: Detailed documentation serves as a valuable resource for onboarding new customers and training existing ones on product updates or advanced features. This helps ensure seamless adoption and maximizes the value customers derive from the product, leading to higher customer satisfaction and retention.

In summary, developer documentation plays a pivotal role in improving both SEO and sales for software companies. By providing valuable, comprehensive, and up-to-date information, documentation enhances search engine visibility, builds trust and credibility, streamlines the sales process, and improves customer onboarding and retention.
  
  


 This is the content for the doc changelog/1.0.0.md 

 ## 1.0.0

## New features:

### Web app
- Added to web editor to edit markdown docs
- generate llm.txt file
- AI actions in the web editor such as 


## Bug fixes:

## Web app

- Add image component was not saving to the right location

## Security enhancements/fixes:

## Web app

- Removed an older mermaid npm package, that had vulnerability highlighted in npm audit

## VsCode Extension

- Updated other npm packages to latest/fixed versions



 This is the content for the doc dev-docs/context-changelog-1.0.0.md.md 

 

  ---
# High Level Context
## context
This file is a changelog for version 1.0.0 of a software project that includes both a web application and a Visual Studio Code extension. The changelog outlines new features, bug fixes, and security enhancements for this release.

Key points:
1. New web editor features for editing markdown docs and generating LLM-related files
2. AI actions added to the web editor
3. Bug fix for image component saving in the web app
4. Security improvements, including removal of a vulnerable mermaid npm package
5. Updates to npm packages in the VSCode extension for better security and stability

This changelog provides developers and users with a clear overview of the changes and improvements made in this version, helping them understand what's new and what issues have been addressed.

  

 This is the content for the doc dev-docs/context-docs-Audit your docs.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides a step-by-step guide on how to use the audit feature for documentation. It covers the entire process from navigating to the audit feature, selecting documents to audit, specifying audit criteria, initiating the audit, reviewing results, and making necessary changes to address identified issues. The guide is structured in 13 steps, each accompanied by a screenshot for visual reference. It's designed to help users effectively use the audit tool to improve their documentation by identifying inconsistencies, verifying content against current code, and making targeted improvements. The process includes selecting documents, defining audit scope, reviewing results, and creating draft versions for editing, ensuring a thorough and systematic approach to documentation maintenance and improvement.

  

 This is the content for the doc dev-docs/context-docs-Enable Workflows with the GitHub app.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides instructions on how to enable and configure automated workflows for generating internal documentation and changelogs using a GitHub App. The document outlines the following key points:

1. It explains how to modify the Dev-Docs.json configuration file to enable these features.
2. It describes the steps to locate and edit the Dev-Docs.json file.
3. It shows how to configure which workflows to enable using the `Workflow` enum.
4. It demonstrates how to set up an optional changelog location.
5. It provides a JSON configuration example for reference.
6. It explains how to enable specific workflows for generating docs and changelogs.
7. It mentions how to specify the location for generated changelogs.
8. It includes important notes about proper JSON formatting and automatic detection by the GitHub App.

This guide is intended for developers or project maintainers who want to automate their documentation and changelog generation processes using a GitHub App integration.

  

 This is the content for the doc dev-docs/context-docs-_CodeSnippets.md.md 

 

  ---
# High Level Context
## context
This file appears to be a Markdown document with YAML frontmatter, likely used in a static site generator or documentation system. The file is named "_CodeSnippets.md" and is located in a "docs" directory, suggesting it's part of a documentation project. The content is minimal, consisting of:

1. YAML frontmatter with a title "My MDX Document"
2. A single line of text: "Hey this is coolooo!!!!"

The ".md" extension and the presence of frontmatter suggest this could be a Markdown or MDX (Markdown with JSX) file. The purpose of this file might be to serve as a placeholder or example for code snippets in the documentation, though it doesn't contain any actual code snippets in the provided content.

  

 This is the content for the doc dev-docs/context-docs-_Create new docs from existing docs.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides a step-by-step guide for creating new documentation pages using AI-assisted generation, leveraging existing documentation as context. The process involves:

1. Navigating to the user-facing documentation site
2. Accessing AI generation options
3. Selecting the location for the new document
4. Choosing existing documents as context
5. Adding additional context if needed
6. Entering a prompt for the AI to generate content
7. Publishing the newly generated document
8. Confirming changes

The guide includes screenshots for each step, making it easy for users to follow along visually. This feature appears to be part of a documentation management system that incorporates AI to streamline the process of creating new documentation based on existing content.

  

 This is the content for the doc dev-docs/context-docs-_Generate-Internal-Docs-at-Github-Commit.md.md 

 

  ---
# High Level Context
## context
This file provides a step-by-step guide for setting up a GitHub Actions workflow to automatically generate internal documentation when commits are made to the main branch of a repository. The workflow is triggered by pushes to JavaScript files in the root directory.

Key steps include:
1. Creating a new workflow file in the repository
2. Setting up the workflow to run on push events to the main branch
3. Configuring the workflow to checkout the repository and send an update to a DevDocs service
4. Adding necessary secrets to the repository for API keys and authentication
5. Setting up the GENERATE_ENDPOINT_URL for the DevDocs service

The guide includes detailed instructions with accompanying screenshots for each step, making it easy for users to implement this automated documentation generation process in their GitHub repositories.

---
# Github actions workflow docs/_Generate-Internal-Docs-at-Github-Commit.md
## Imported Code Object
This GitHub Actions workflow is named "Gen Internal Docs" and is designed to automatically generate internal documentation when specific conditions are met. Here's a concise explanation:

1. Trigger: The workflow is triggered on push events to the main branch, but only when changes are made to JavaScript files in the root directory.

2. Job: It defines a single job called "dev-docs-app" that runs on the latest Ubuntu environment.

3. Steps:
   a. Checkout the repository using the actions/checkout@v2 action.
   b. Send an update to a DevDocs service by making a POST request to a specified endpoint.

4. The POST request includes:
   - A timestamp
   - An API key (stored as a secret)
   - A GitHub Personal Access Token (stored as a secret)
   - The GitHub repository name
   - The GitHub actor (user who triggered the workflow)

5. The curl command is used to send this information to the specified endpoint, which is likely a service that generates or updates the internal documentation based on the latest changes.

This workflow automates the process of updating internal documentation whenever relevant changes are pushed to the main branch of the repository.

  

 This is the content for the doc dev-docs/context-docs-_Generating-an-API-Key.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides step-by-step instructions on how to generate an API key for a service, likely for Dev-Docs. The document includes:

1. Navigating to the user profile menu
2. Accessing the Personal API keys section
3. Generating a new API key
4. Replacing an existing API key
5. Copying the newly generated API key for future use

Each step is accompanied by a screenshot to guide users visually through the process. The document is structured to be easily followed by users who need to create or update their API key for accessing the service's features or integrations.

  

 This is the content for the doc dev-docs/context-docs-_Integrate-Dev-Docs-with-a-Custom-Docs-Repo.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides a detailed, step-by-step guide on how to integrate Dev-Docs with a custom documentation repository hosted on GitHub. The process involves:

1. Navigating the Dev-Docs website
2. Setting up external documentation integration
3. Configuring GitHub repository details
4. Creating a Personal Access Token on GitHub with appropriate permissions
5. Entering the token and repository information in Dev-Docs

The guide includes 18 steps, each with clear instructions and accompanying screenshots to help users through the process. It covers everything from finding the correct options on the Dev-Docs website to generating a GitHub Personal Access Token with the necessary permissions for repository access. The guide aims to simplify the integration process, making it accessible for users who want to connect their custom documentation to the Dev-Docs platform.

  

 This is the content for the doc dev-docs/context-docs-_Use the intro feature.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides a step-by-step guide on how to use the intro feature in a project, likely within a code editor or integrated development environment (IDE). The document outlines four main steps:

1. Accessing the Command Palette to initiate the intro feature
2. Exploring the file structure of the project
3. Examining various project files (JavaScript, Markdown, and configuration files)
4. Analyzing the main JavaScript file for important functions and logic

Each step is accompanied by an image that illustrates the action being described, providing visual guidance for users. This document appears to be part of a larger documentation set, aimed at helping new users or contributors familiarize themselves with the project structure and key features of the development environment.

  

 This is the content for the doc dev-docs/context-docs-_Using-the-Chrome-Extension.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides a comprehensive guide on how to use the Dev-Docs Chrome extension. It covers the following key points:

1. Prerequisites: Installing the extension and setting up a Dev-Docs account
2. Selecting the organization and optional custom repo setup
3. Using the extension:
   - Step 1: Starting a recording session, including options for topic, writing persona, and additional context
   - Step 2: Clicking through the workflow to be documented
   - Step 3: Reopening the extension to generate the guide
   - Step 4: Viewing results and updating documentation

The guide includes screenshots to illustrate the process and provides links to additional resources and setup instructions. It's designed to help users effectively use the Dev-Docs Chrome extension for capturing screenshots and generating markdown documentation for UI browser workflows.

  

 This is the content for the doc dev-docs/context-docs-_Welcome to Dev-Docs.md.md 

 

  ---
# High Level Context
## context
This file appears to be a welcome page or introduction for Dev-Docs, a documentation tool for developers. The content provides an overview of the tool's purpose and its two main use cases:

1. External Documentation: Aimed at users, customers, developers, and partners who interact with the organization's APIs, SDKs, or applications. It focuses on improving developer experience and providing self-service implementation and support guides.

2. Internal Documentation: Intended for internal software engineering teams and contributors to the codebase. It helps with knowledge sharing, maintaining consistency, collaboration, and onboarding new team members. It also serves as a record of decision-making processes and explanations of how the codebase works.

The file is likely formatted in Markdown, as indicated by the '#' symbols for headings, and is probably part of a larger documentation structure within the Dev-Docs system.

  

 This is the content for the doc dev-docs/context-docs-_audit.md.md 

 

  ---
# High Level Context
## context
The file docs/_audit.md appears to be empty or not provided in the context. Without any content to analyze, I cannot provide a high-level context for this file. Typically, a file named _audit.md in a docs folder might contain information related to auditing processes, security checks, or documentation about system audits, but without seeing the actual content, it's impossible to confirm or elaborate on its specific purpose or contents.

  

 This is the content for the doc dev-docs/context-docs-editor-Add a table.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides a step-by-step guide on how to add a table to a document using a specific editor or application. The instructions are presented in a clear, numbered format with accompanying images for each step. The guide covers the entire process, from positioning the cursor to inserting the table, editing column headers, and adding content. It's designed to be an easy-to-follow tutorial for users who may be unfamiliar with the table insertion feature in this particular editing tool.

  

 This is the content for the doc dev-docs/context-docs-editor-Add an image.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides a step-by-step guide on how to add an image to a document using a specific editor or content management system. The guide is structured in 11 steps, each with a descriptive title, an accompanying image, and a brief explanation of the action to be taken.

The process covers:
1. Selecting the location for the image
2. Accessing formatting options
3. Choosing the "Add Image" option
4. Interacting with the image upload dialog
5. Specifying the folder location for the image
6. Naming the image
7. Initiating the upload process
8. Selecting the image file from the user's computer
9. Monitoring the upload progress
10. Observing the image placeholder in the document
11. Viewing the final result with the image displayed in the document

Each step is illustrated with a screenshot, making it easy for users to follow along visually. The file is designed to be a comprehensive, user-friendly guide for adding images to documents within the specific editor or system.

  

 This is the content for the doc dev-docs/context-docs-editor-Add and edit frontmatter.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides a step-by-step guide on how to add and edit frontmatter in a document editor, likely for a content management system or static site generator. The guide consists of 12 steps, each accompanied by a screenshot, detailing the process of:

1. Opening the metadata drawer
2. Accessing the "File metadata" section
3. Adding new parameters (specifically "title" and "author")
4. Inputting values for these parameters
5. Saving the changes

The instructions are clear and concise, making it easy for users to understand how to manipulate frontmatter data in their documents. This guide is particularly useful for content creators or developers who need to manage metadata for their files within the system.

  

 This is the content for the doc dev-docs/context-docs-editor-Audit your docs.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides a step-by-step guide on how to conduct an audit of documentation using a specific documentation management tool or platform. The process includes:

1. Accessing the audit feature
2. Selecting documents to audit
3. Choosing the audit scope
4. Specifying audit criteria
5. Reviewing audit options
6. Initiating the audit
7. Viewing and analyzing audit results
8. Selecting issues to address
9. Preparing for modifications
10. Copying affected pages to drafts
11. Monitoring the copy process
12. Reviewing updated drafts
13. Making necessary changes

The guide is designed to help users identify inconsistencies, gaps, or other issues in their documentation and provides a workflow for addressing these issues through a draft-and-edit process. Each step is accompanied by a screenshot to visually guide users through the process.

  

 This is the content for the doc dev-docs/context-docs-editor-Generate Content from Existing Content.md.md 

 

  ---
# High Level Context
## context
This file provides a step-by-step guide on how to generate new content from existing documents using an AI-powered documentation tool. The process involves:

1. Accessing the content generation interface
2. Selecting context documents
3. Specifying the task or prompt
4. Submitting the request for content generation
5. Reviewing and refining the generated content
6. Formatting and structuring the new content
7. Adding additional information as needed
8. Finalizing and publishing the new document

The guide includes 16 steps, each accompanied by a screenshot, explaining how to navigate the tool's interface, select appropriate context, craft prompts, and edit the generated content. It emphasizes that the AI-generated content should be treated as a starting point, with human intervention required for customization and quality assurance.

  

 This is the content for the doc dev-docs/context-docs-editor-Generate Content from your codebase.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides a step-by-step guide for using the Dev-Docs GitHub App to generate content from a user's codebase and documentation. The process includes:

1. Authorizing and installing the Dev-Docs GitHub App
2. Configuring repository access
3. Accessing the content generation interface
4. Selecting context from existing documentation or code files
5. Generating AI-based content
6. Reviewing and refining the generated content
7. Adding additional context if needed
8. Finalizing and saving the generated content

The guide includes screenshots for each step, making it easy for users to follow along and understand the process of leveraging their codebase and existing documentation to create new content using AI-assisted tools.

  

 This is the content for the doc dev-docs/context-docs-editor-Generate content from existing content.md.md 

 

  ---
# High Level Context
## context
This markdown file provides a step-by-step guide on how to generate new content based on existing documentation using an AI-powered content generation tool. The process involves:

1. Accessing the content generation interface
2. Selecting existing documents as context
3. Specifying the task or prompt for content generation
4. Submitting the request and waiting for the AI to generate content
5. Reviewing, editing, and refining the generated content
6. Formatting and structuring the new content
7. Adding additional information as needed
8. Finalizing and publishing the new document

The guide includes 16 steps, each accompanied by a screenshot to visually demonstrate the process. It emphasizes that the generated content should be used as a starting point and encourages users to customize and refine the output to meet their specific documentation needs.

  

 This is the content for the doc dev-docs/context-docs-editor-Generate content from your codebase and docs.md.md 

 

  ---
# High Level Context
## context
This markdown file provides a step-by-step guide for setting up and using the Dev-Docs GitHub App to generate content from a user's codebase and documentation. The process involves:

1. Authorizing and installing the Dev-Docs GitHub App
2. Configuring repository access
3. Accessing the content generation interface
4. Selecting context from existing documentation or code files
5. Generating and reviewing AI-created content
6. Refining and iterating on the generated content
7. Adding additional context if needed
8. Finalizing and saving the generated content to documentation

The guide includes visual aids (images) for each step, making it easier for users to follow along and understand the process of leveraging AI to create documentation based on their existing codebase and docs.

  

 This is the content for the doc dev-docs/context-docs-editor-View raw markdown content.md.md 

 

  ---
# High Level Context
## context
This markdown file provides a step-by-step guide on how to view and edit raw markdown content in a document editor. The guide includes:

1. Instructions for switching from rich text editor mode to raw editor mode
2. Steps to locate and use the dropdown menu for changing editor modes
3. Explanation of how to view and edit raw markdown directly
4. Instructions for switching back to the rich text editor mode

Each step is accompanied by a numbered heading and an image illustrating the action to be taken. The guide is designed to be user-friendly and easy to follow, allowing users to toggle between rich text and raw markdown views of their documents.

  

 This is the content for the doc dev-docs/context-docs-editor-View raw markdown.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides a step-by-step guide on how to view and edit raw Markdown content in a document editor. The guide includes:

1. A title and seven steps, each with a description and an accompanying image.
2. Instructions for switching between rich text editor mode and raw editor mode.
3. Details on locating and using the editor mode dropdown menu.
4. Guidance on viewing and editing raw Markdown content directly.
5. Instructions for switching back to the rich text editor view.

The document is structured to provide a clear, visual walkthrough of the process, making it easy for users to understand how to access and work with raw Markdown in the editor.

  

 This is the content for the doc dev-docs/context-docs-editor-_Generate content from your codebase and docs.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides a step-by-step guide for using the Dev-Docs GitHub App to generate content from a user's codebase and documentation. The process includes:

1. Authorizing and installing the Dev-Docs GitHub App
2. Configuring repository access
3. Using the content generation interface
4. Selecting context from existing documentation or code
5. Reviewing and refining AI-generated content
6. Adding additional context if needed
7. Finalizing and saving the generated content

The guide is accompanied by screenshots for each step, making it easy for users to follow along and understand the process of leveraging their codebase and existing documentation to create new content using AI-assisted tools.

  

 This is the content for the doc dev-docs/context-docs-editor-_View raw markdown content.md.md 

 

  ---
# High Level Context
## context
This file is a markdown document that provides a step-by-step guide on how to view raw markdown content in a document editor. It includes the following key points:

1. The document is structured with a main title and seven steps.
2. Each step is accompanied by an image, likely screenshots, to visually guide the user through the process.
3. The guide explains how to switch from a rich text editor view to a raw markdown view.
4. It covers the process of locating and using a dropdown menu to change the editing mode.
5. The document also includes instructions on how to switch back to the rich text editor view.
6. The content is designed to be easily followed, with clear titles and visual aids for each step.

This guide is likely part of a larger documentation set for a markdown-based editing tool or content management system, aimed at helping users understand how to access and edit raw markdown content.

  

 This is the content for the doc dev-docs/context-docs-editor-_category_.json.md 

 

  ---
# High Level Context
## context
This JSON file appears to be a configuration file for a documentation system or content management system. It defines metadata for a category or section in the documentation structure. The file specifies:

1. A position value of 5, which likely determines the order in which this category appears relative to other categories.
2. A label "Web rich text editor", which is probably used as the display name for this category in the documentation navigation or menu.

This file is likely used to organize and structure documentation related to a web-based rich text editor component or feature within a larger documentation system.

  

 This is the content for the doc dev-docs/context-docs-editor-add a new draft.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides a step-by-step guide on how to add a new draft in a document editing interface. The instructions are broken down into six steps, each accompanied by a screenshot for visual reference. The process includes:

1. Opening the drafts section
2. Clicking to add a new draft
3. Starting to type the draft content
4. Automatic saving of the draft
5. Continuing to edit the draft
6. Confirming that the draft is stored as markdown in a connected repository

The guide emphasizes the ease of use, automatic saving features, and the integration with a markdown-based documentation system. It's designed to help users quickly understand how to create and manage drafts within the editor interface.

  

 This is the content for the doc dev-docs/context-docs-editor-delete a draft.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides step-by-step instructions on how to delete a draft document in a document editor application. The content is structured as follows:

1. It starts with a title explaining the purpose of the document.
2. It then breaks down the process into three clear steps:
   - Navigating to the Drafts section
   - Selecting the draft to delete
   - Clicking the Delete button

Each step is accompanied by a descriptive text and a reference to an image that visually demonstrates the action. The file uses Markdown syntax for formatting, including headers, image links, and emphasis.

The document is designed to be user-friendly, guiding users through the process of deleting a draft with clear instructions and visual aids. It also includes a cautionary note at the end, reminding users that deleting a draft is a permanent action.

  

 This is the content for the doc dev-docs/context-docs-editor-generate a llm.txt file.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides a step-by-step guide on how to generate a llm.txt file using a specific interface or application. The document outlines four main steps:

1. Opening the Create/Update Dialog
2. Locating the File Location Field
3. Entering the File Location
4. Generating the File

Each step is accompanied by a brief description and a corresponding image to illustrate the process visually. The guide is designed to be user-friendly, walking the reader through the process of specifying where they want the llm.txt file to be created or updated, and then generating it. The example given uses "static/films" as the file location, suggesting this might be related to a film or media management system.

  

 This is the content for the doc dev-docs/context-docs-editor-merge your drafts to another branch.md.md 

 

  ---
# High Level Context
## context
This Markdown file provides a step-by-step guide on how to merge drafts to another branch in a documentation or content management system. The document is structured as a tutorial with 11 steps, each accompanied by a screenshot to illustrate the process visually. The steps cover:

1. Opening the drafts menu
2. Viewing draft contents
3. Accessing the "Push to GitHub" feature
4. Selecting drafts to push
5. Choosing specific drafts
6. Confirming the selection
7. Selecting the target branch
8. Choosing the specific target branch
9. Confirming the branch selection
10. Pushing changes to GitHub
11. Verifying the successful merge

This guide is designed to help users navigate the process of merging their draft content into a specific branch on GitHub, likely as part of a documentation workflow or content publishing process.

  