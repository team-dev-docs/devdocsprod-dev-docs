# Dev-Docs VSCode Extension

Dev-Docs is a powerful VSCode extension designed to streamline the process of creating and managing documentation for your projects. It offers a wide range of features to help developers generate, organize, and maintain both internal and external documentation.

## Key Features

1. **Automatic Documentation Generation**: Generates documentation for your code files, including functions, classes, and methods.
2. **Context-Aware Documentation**: Creates high-level context documentation for files and folders.
3. **API Documentation**: Automatically generates API documentation and Postman collections.
4. **External Documentation Support**: Facilitates the creation and management of external-facing documentation.
5. **Search Functionality**: Allows you to search through your documentation easily.
6. **Version Control Integration**: Integrates with Git for documentation version control.
7. **Customizable AI-Powered Documentation**: Uses AI to generate documentation based on customizable prompts and filters.

## Getting Started

1. Install the Dev-Docs extension from the VSCode marketplace.
2. Sign in to Dev-Docs using your GitHub account by running the `devdocs.getGitHubUser` command.
3. Initialize Dev-Docs in your project by running the `devdocs.versionControl` command.
4. Start generating documentation using various commands like `devdocs.generateDocumentation` or `devdocs.generateAPIDocumentation`.

## Commands

- `devdocs.helloWorld`: Open the main Dev-Docs interface
- `devdocs.generateDocumentation`: Generate documentation for the current file
- `devdocs.generateAPIDocumentation`: Generate API documentation
- `devdocs.generateContext`: Generate high-level context for the current file
- `devdocs.generateMultiContext`: Generate context for multiple files
- `devdocs.generateExternalDocs`: Generate external-facing documentation
- `devdocs.search`: Search through your documentation
- `devdocs.auditDocs`: Audit your documentation for improvements

## Configuration

You can customize Dev-Docs behavior by modifying the `dev-docs.json` file in your project root. This file allows you to set various options such as:

- `ai.internalTypeFilters`: Specify which code elements to document
- `ai.codeFilters`: Filter code based on specific criteria
- `ai.nameFilters`: Filter elements by name
- `ai.docSubFolder`: Specify a subfolder for documentation
- `ai.branch`: Set a specific branch for documentation commits

## Contributing

To contribute to the Dev-Docs extension, please refer to the [CONTRIBUTING.md](CONTRIBUTING.md) file in the repository.

For more detailed information and advanced usage, please refer to the [official Dev-Docs documentation](https://dev-docs.dev/docs).